#!/bin/bash -ex

TOP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
ARTIFACTS_DIR="${TOP_DIR}/dist/artifacts"
ISO_PREFIX="harvester-v1.2.0-amd64"

echo "Prepare to repack ${ISO_PREFIX}.iso..."

cd ${TOP_DIR}
mkdir -p ${ARTIFACTS_DIR}

# Pre-check for repack
if [ ! -f "${TOP_DIR}/${ISO_PREFIX}.iso" ]; then
   echo "$ISO_FILE does not exist, please ensure you have the ISO file for repack"
   exit 1
fi

# Unpack ISO for reconfiguring boot image
# Elemental toolkit deprecated legacy BIOS boot support, and can only use one boot method (UEFI/BIOS) at the same time,
# so we need to unpack the ISO, add legacy BIOS boot support back, and repack it.
# It's a workaround for now, and we will remove legacy BIOS boot support in the future releases.
extract_dir=$(mktemp -d)
xorriso -osirrox on -indev ${TOP_DIR}/${ISO_PREFIX}.iso -extract / "${extract_dir}"

# Reset permissions, directories 0755 and files 0644
# otherwise upgrade would fail due to wrong permission on /run/initramfs/live in upgrade repository VM
chmod -R a=r,u+w,a+X "${extract_dir}"

# Use dd to create empty image, create an empty FAT32 filesystem
# and copy EFI files to it to make it UEFI bootable
uefi_img="${extract_dir}/boot/uefi.img"
dd if=/dev/zero of="${uefi_img}" bs=1k count=4096 status=progress
mkfs.vfat "${uefi_img}" -n COS_GRUB
mcopy -s -i "${uefi_img}" "${extract_dir}/EFI" ::

# Remove original ISO, and repack it using xorriso
#rm -f ${ISO_FILE}
xorriso -volid "COS_LIVE" \
   -joliet on -padding 0 \
   -outdev "${ARTIFACTS_DIR}/${ISO_PREFIX}.iso" \
   -map "${extract_dir}" / -chmod 0755 -- \
   -boot_image grub bin_path="boot/x86_64/loader/eltorito.img" \
   -boot_image grub grub2_mbr="${extract_dir}/boot/x86_64/loader/boot_hybrid.img" \
   -boot_image grub grub2_boot_info=on \
   -boot_image any partition_offset=16 \
   -boot_image any cat_path="boot/x86_64/boot.catalog" \
   -boot_image any cat_hidden=on \
   -boot_image any boot_info_table=on \
   -boot_image any platform_id=0x00 \
   -boot_image any emul_type=no_emulation \
   -boot_image any load_size=2048 \
   -append_partition 2 0xef "${extract_dir}/boot/uefi.img" \
   -boot_image any next \
   -boot_image any efi_path=--interval:appended_partition_2:all:: \
   -boot_image any platform_id=0xef \
   -boot_image any emul_type=no_emulation

# Cleanup
rm -rf "${extract_dir}"

# Write checksum
cd ${ARTIFACTS_DIR}
CHECKSUM_FILE=${ISO_PREFIX}.sha512
sha512sum ${ISO_PREFIX}.iso > $CHECKSUM_FILE

echo "Repack done, please check ${ARTIFACTS_DIR} for the new ISO file and checksum file"